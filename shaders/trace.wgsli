#include "ray.wgsli"
#include "hit.wgsli"

let light: vec3<f32> = vec3<f32>(0.0, 3.0, 0.0);
let light_size: f32 = 0.2;
fn direct_light(point: vec3<f32>, normal: vec3<f32>) -> f32 {
    let light_dir = normalize(light - point);
    let irradiance = dot(normal, light_dir);
    if (irradiance <= 0.0) {
        return 0.0;
    }
    let dist = distance(point, light);
    let occlusion = march_cone(
        ray_from(point, light_dir),
        light_size / dist,
        dist,
        500u);
    // return 1.0;
    return max(irradiance - occlusion.voxel.a, 0.0);
}

fn ambient_occlusion(point: vec3<f32>, normal: vec3<f32>) -> f32 {
    let probes: array<vec3<f32>, 8> = select(
        array<vec3<f32>, 8>(
            ao_probes[2] + ao_probes[4],
            ao_probes[2] + ao_probes[5],
            ao_probes[3] + ao_probes[4],
            ao_probes[3] + ao_probes[5],
            ao_probes[2],
            ao_probes[3],
            ao_probes[4],
            ao_probes[5],
        ),
        select(
            array<vec3<f32>, 8>(
                ao_probes[0] + ao_probes[4],
                ao_probes[0] + ao_probes[5],
                ao_probes[1] + ao_probes[4],
                ao_probes[1] + ao_probes[5],
                ao_probes[0],
                ao_probes[1],
                ao_probes[4],
                ao_probes[5],
            ),
            array<vec3<f32>, 8>(
                ao_probes[0] + ao_probes[2],
                ao_probes[0] + ao_probes[3],
                ao_probes[1] + ao_probes[2],
                ao_probes[1] + ao_probes[3],
                ao_probes[0],
                ao_probes[1],
                ao_probes[2],
                ao_probes[3],
            ),
            normal.y != 0.0
        ),
        normal.x != 0.0
    );

    var ret: f32 = 0.0;
    var i: u32 = 0u;
    loop {
        let occlusion = sample_cone(
            ray_from(
                point, //+ normal * voxel_radius[0].x * 1.95,
                probes[i] + normal
            ),
            0.1, 1u
        );

        let d = occlusion.voxel.a; // * voxel_radius[0].x / occlusion.intersection.distance;

        ret = ret + d * d * 0.125;

        i = i + 1u;
        if (i >= 8u) {
            break;
        }
    }
    // return 0.0;
    return min(ret * 1.0, 1.0);
}

let ambient_light_intensity: f32 = 0.15;
fn trace_ray(ray: Ray, tan_aperture: f32) -> vec4<f32> {
    let hit = march_ray(ray, tan_aperture, 160u);
    // let hit = march_cone(ray, 0.01, 1000.0, 500u);
    // let hit = sample_cone(ray, 0.1, 500u);
    if (!hit.hit) {
        return vec4<f32>(0.0, 0.0, 0.0, 0.0);
    }
    let hit_point = ray.direction * hit.intersection.distance + ray.origin;

    let irradiance =
        (ambient_light_intensity
         + direct_light(hit_point, hit.intersection.normal))
        * (1.0 - ambient_occlusion(hit_point, hit.intersection.normal));

    return vec4<f32>(hit.voxel.rgb * clamp(irradiance, 0.0, 1.0), 1.0);
}
